GROUP_ID = '209327238'
GROUP_TOKEN = '59ae3dfdb6233f3cafce3b1671c8579d46a0bfc9bc168b58d378b0779fdf658c2b51d1bcd8f35c7ed4514'

#----------------------------------------------------------------------------------------------------------------------------

from vk_api import VkApi
from vk_api.utils import get_random_id
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
import threading
import datetime

#----------------------------------------------------------------------------------------------------------------------------

from EventGetter import EventGetter

eg = EventGetter()

associative_dict = {
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": [
        "https://olimpiada.ru/activity/72", "https://olimpiada.ru/activity/149",
        "https://olimpiada.ru/activity/1", "https://olimpiada.ru/activity/348",
        "https://olimpiada.ru/activity/443", "https://olimpiada.ru/activity/395",
        "https://olimpiada.ru/activity/246"
    ],
                    
    "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫": [
        "https://olimpiada.ru/activity/80", "https://olimpiada.ru/activity/160"
    ],
                    
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": [
        "https://olimpiada.ru/activity/73", "https://olimpiada.ru/activity/153",
        "https://olimpiada.ru/activity/102", "https://olimpiada.ru/activity/5371",
        "https://olimpiada.ru/activity/343", "https://olimpiada.ru/activity/465",
        "https://olimpiada.ru/activity/5283"
    ],
                    
    "–í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∞—è –û–ª–∏–º–ø–∏–∞–¥–∞ –®–∫–æ–ª—å–Ω–∏–∫–æ–≤": [ 
        "https://olimpiada.ru/activity/73", "https://olimpiada.ru/activity/72",
        "https://olimpiada.ru/activity/80" 
    ],
                    
    "–í—ã—Å—à–∞—è –ø—Ä–æ–±–∞": [
        "https://olimpiada.ru/activity/153", "https://olimpiada.ru/activity/149",
        "https://olimpiada.ru/activity/160"
    ],

    "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞": [
        "https://olimpiada.ru/activity/1", "https://olimpiada.ru/activity/102"
    ],

    "–õ–æ–º–æ–Ω–æ—Å–æ–≤": [
        "https://olimpiada.ru/activity/348", "https://olimpiada.ru/activity/343"
    ],

    "–û–ª–∏–º–ø–∏–∞–¥–∞ –°–ü–±–ì–£": [
        "https://olimpiada.ru/activity/465", "https://olimpiada.ru/activity/443"
    ],

    "–§–∏–∑—Ç–µ—Ö": [
        "https://olimpiada.ru/activity/395"
    ],

    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤": [
        "https://olimpiada.ru/activity/246"
    ],

    "–¢–µ—Ö–Ω–æ–ö—É–±–æ–∫": [
        "https://olimpiada.ru/activity/5371"
    ],

    "Innopolis Open": [
        "https://olimpiada.ru/activity/5283"
    ]
}

#----------------------------------------------------------------------------------------------------------------------------

vk_session = VkApi(token = GROUP_TOKEN)
vk = vk_session.get_api()
longpoll = VkBotLongPoll(vk_session, group_id = GROUP_ID)

#----------------------------------------------------------------------------------------------------------------------------

main_menu = VkKeyboard(one_time = False, inline = True)

main_menu.add_callback_button(
                              label='–ù–∞–π—Ç–∏ –æ–ª–∏–º–ø–∏–∞–¥—É –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É',
                              color=VkKeyboardColor.POSITIVE,
                              payload={ "type": "menu_choose", "choose": "subject" }
                             )
main_menu.add_line()

main_menu.add_callback_button(
                              label='–ù–∞–π—Ç–∏ –æ–ª–∏–º–ø–∏–∞–¥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é', 
                              color=VkKeyboardColor.POSITIVE,
                              payload={ "type": "menu_choose", "choose": "name" }
                             )

#----------------------------------------------------------------------------------------------------------------------------

start_keyboard = VkKeyboard(one_time = False, inline = False)

start_keyboard.add_button(label = "–ò—Å–∫–∞—Ç—åüîé", color = VkKeyboardColor.NEGATIVE)
start_keyboard.add_button(label = "–ú–æ–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã", color = VkKeyboardColor.PRIMARY)
start_keyboard.add_line()

start_keyboard.add_button(label = "–û —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö", color = VkKeyboardColor.SECONDARY)

#----------------------------------------------------------------------------------------------------------------------------

subjects_names = ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"]

keyboard_subjects = VkKeyboard(one_time = False, inline = True)

for name in subjects_names:
    keyboard_subjects.add_callback_button(
                                          label = name,
                                          color = VkKeyboardColor.SECONDARY,
                                          payload = {"type": "subject_type", "name": name}
                                         )

    if name != subjects_names[-1]:
        keyboard_subjects.add_line()

#----------------------------------------------------------------------------------------------------------------------------

olympiads_names = [
    "–í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∞—è –û–ª–∏–º–ø–∏–∞–¥–∞ –®–∫–æ–ª—å–Ω–∏–∫–æ–≤", "–í—ã—Å—à–∞—è –ø—Ä–æ–±–∞",
    "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞", "–õ–æ–º–æ–Ω–æ—Å–æ–≤",
    "–û–ª–∏–º–ø–∏–∞–¥–∞ –°–ü–±–ì–£", "–§–∏–∑—Ç–µ—Ö",
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤", "–¢–µ—Ö–Ω–æ–ö—É–±–æ–∫",
    "Innopolis Open"
]

keyboard_olympiads = VkKeyboard(one_time = False, inline = True)

i = 1
for name in olympiads_names:
    keyboard_olympiads.add_callback_button(
                                           label = name,
                                           color = VkKeyboardColor.SECONDARY,
                                           payload = {"type": "olympiad_type", "name": name}
                                          )
    
    if i%3 == 0 and name != olympiads_names[-1]:
        keyboard_olympiads.add_line()

    i += 1

#----------------------------------------------------------------------------------------------------------------------------

class Buttons:
    def menu(obj):
        vk.messages.send(
                         user_id = obj.message['from_id'],
                         random_id = get_random_id(),
                         keyboard = main_menu.get_keyboard(),
                         message = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                        )

    def creators(obj):
        vk.messages.send(
                         user_id = obj.message['from_id'],
                         random_id = get_random_id(),
                         message = "–°–æ–∑–¥–∞—Ç–µ–ª–∏: @loadingo (–í–∞—Ä–Ω–∞—á—ë–≤ –ò–≥–æ—Ä—å), @id560966675 (–ê–ª–∏–µ–≤ –ê–Ω—Ç–æ–Ω)\n–ë–æ—Ç —Å–¥–µ–ª–∞–Ω –∫–∞–∫ —à–∫–æ–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç."
                        )

    def reminders(obj):
        message = "–°–ø–∏—Å–æ–∫ –í–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–ª–æ–∫:\n"

        if str(obj.message['from_id']) not in users_reminders:
            users_reminders[str(obj.message['from_id'])] = {}

        months = {
                1 : "—è–Ω–≤–∞—Ä—è",
                2 : "—Ñ–µ–≤—Ä–∞–ª—è",
                3 : "–º–∞—Ä—Ç–∞",
                4 : '–∞–ø—Ä–µ–ª—è',
                5 : '–º–∞—è',
                6 : '–∏—é–Ω—è',
                7 : '–∏—é–ª—è',
                8 : '–∞–≤–≥—É—Å—Ç–∞',
                9 : '—Å–µ–Ω—Ç—è–±—Ä—è',
                10 : '–æ–∫—Ç—è–±—Ä—è',
                11 : '–Ω–æ—è–±—Ä—è',
                12 : '–¥–µ–∫–∞–±—Ä—è'
            }

        for remind in users_reminders[str(obj.message['from_id'])]:
            date = users_reminders[str(obj.message['from_id'])][remind]

            message += f"* {remind} - {date[0]} {months[date[1]]}\n\n"

        vk.messages.send(
                         user_id = obj.message['from_id'],
                         random_id = get_random_id(),
                         message = message
                        )

#----------------------------------------------------------------------------------------------------------------------------

def reminding(THREAD):
    for user in users_reminders:

        for olymp, date in users_reminders[user].items():
            print(olymp, date, [ int(now.day), int(now.month) ] )

            if [ int(now.day)-1, int(now.month) ] == date:
                vk.messages.send(
                        user_id = int(user),
                        random_id = get_random_id(),
                        message = f"–£–∂–µ –∑–∞–≤—Ç—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è {olymp}"
                    )

            if [ int(now.day), int(now.month) ] == date:
                vk.messages.send(
                        user_id = int(user),
                        random_id = get_random_id(),
                        message = f"–°–µ–≥–æ–¥–Ω—è –Ω–∞—á–Ω–µ—Ç—Å—è {olymp}"
                    )

    if not THREAD.is_set():
        threading.Timer(86400, reminding, [THREAD]).start()

#----------------------------------------------------------------------------------------------------------------------------

now = datetime.datetime.now()

users_reminders = {}
#users_reminders = { user_id: { "olymp": "date" } }

print("Bot started.")

THREAD = threading.Event()
reminding(THREAD)

for event in longpoll.listen():

    #----------------------------------------------------------------------------------------------------------------------------

    if event.type == VkBotEventType.MESSAGE_NEW:

        if event.obj.message['text'].lower() == "–∏—Å–∫–∞—Ç—åüîé":
            Buttons.menu(event.object)

        elif event.obj.message['text'].lower() == "–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö":
            Buttons.creators(event.object)

        elif event.obj.message['text'].lower() == "–º–æ–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã":
            Buttons.reminders(event.object)


        elif event.obj.message['text'].lower() in ("–Ω–∞—á–∞—Ç—å", "start"):

            user_name = vk.users.get(user_ids = event.object.message['from_id'])[0]['first_name']
            vk.messages.send(
                             user_id = event.obj.message['from_id'],
                             random_id = get_random_id(),
                             keyboard = start_keyboard.get_keyboard(),
                             message = f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, {user_name}\n–ß—Ç–æ–±—ã –º–Ω–æ—é –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏‚Üì"
                            )

    #----------------------------------------------------------------------------------------------------------------------------

    elif event.type == VkBotEventType.MESSAGE_EVENT:
        type_event = event.object.payload.get('type')


        if type_event == "menu_choose":
            choose = event.obj.payload.get("choose")

            if choose == "subject":
                keyboard = keyboard_subjects.get_keyboard()
                message = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –∏—Å–∫–∞—Ç—å –æ–ª–∏–º–ø–∏–∞–¥—É:"

            elif choose == "name":
                keyboard = keyboard_olympiads.get_keyboard()
                message = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥—ã:"

            vk.messages.edit(
                              peer_id = event.obj.peer_id,
                              conversation_message_id = event.obj.conversation_message_id,
                              keyboard = keyboard,
                              message = message
                            )

        #----------------------------------------------------------------------------------------------------------------------------

        elif type_event in ("subject_type", "olympiad_type"):
            event_name = event.object.payload.get("name")

            vk.messages.edit(
                             peer_id = event.obj.peer_id,
                             conversation_message_id = event.obj.conversation_message_id,
                             message = f"–ò–¥—ë—Ç –ø–æ–∏—Å–∫..."
                            )

            answer = ""

            ans_keyboard = VkKeyboard( one_time = False, inline = True )

            i = 1

            months = {
                1 : "—è–Ω–≤–∞—Ä—è",
                2 : "—Ñ–µ–≤—Ä–∞–ª—è",
                3 : "–º–∞—Ä—Ç–∞",
                4 : '–∞–ø—Ä–µ–ª—è',
                5 : '–º–∞—è',
                6 : '–∏—é–Ω—è',
                7 : '–∏—é–ª—è',
                8 : '–∞–≤–≥—É—Å—Ç–∞',
                9 : '—Å–µ–Ω—Ç—è–±—Ä—è',
                10 : '–æ–∫—Ç—è–±—Ä—è',
                11 : '–Ω–æ—è–±—Ä—è',
                12 : '–¥–µ–∫–∞–±—Ä—è'
            }

            k = 0
            for url in associative_dict[event_name]:
                info = eg.getEvent(url)

                ENABLE = True

                label_button = f"–í —Å–ø–∏—Å–æ–∫ ‚Ññ{i}"

                if info[0] == (-1, -1):
                    event_start = "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"

                    ENABLE = False

                else:
                    day, month = info[0][0], info[0][1]

                    event_start = f"{day} {months[month]}"

                if info[1] == (-1, -1):
                    event_end = "–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω"

                else:
                    day, month = info[1][0], info[1][1]

                    event_end = f"{day} {months[month]}"

                if info[4] != "":
                    add_info = f" ({info[4]})"

                else:
                    add_info = ""

                if type_event == "olympiad_type":
                    main_info = info[3]

                else:
                    main_info = info[2]

                answer += f"{i}. {main_info}{add_info}\n\t–ù–∞—á–∞–ª–æ: {event_start}\n\t–ö–æ–Ω–µ—Ü: {event_end}\n\n"

                i += 1

                if str(event.obj.user_id) not in users_reminders:
                    users_reminders[str(event.obj.user_id)] = {}

                if f"{info[2]}, {info[3]}, {info[4]}" in users_reminders[str(event.obj.user_id)]:
                    ENABLE = False


                if not ENABLE:
                    label_button += " (–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ)"


                ans_keyboard.add_callback_button(
                    label=label_button,
                    color=VkKeyboardColor.SECONDARY,
                    payload={
                              "type": "olympiad_choose",
                              "enable": ENABLE,
                              "choose": [f"{info[2]}, {info[3]}, {info[4]}", info[0]],
                              "user_id": str(event.obj.user_id)
                            }
                )

                if i%3 ==0 and url != associative_dict[event_name][-1]:
                    ans_keyboard.add_line()

                k += 1



            vk.messages.edit(
                             peer_id = event.obj.peer_id,
                             conversation_message_id = event.obj.conversation_message_id,
                             keyboard = ans_keyboard.get_keyboard(),
                             message = answer
                            )

        #----------------------------------------------------------------------------------------------------------------------------

        elif type_event == "olympiad_choose":
            payload = event.obj.payload

            if payload["enable"]:
                if payload["user_id"] not in users_reminders:
                    users_reminders[payload["user_id"]] = {}

                info = payload["choose"]

                users_reminders[payload["user_id"]][info[0]] = info[1]

                vk.messages.send(
                    user_id = payload["user_id"],
                    random_id = get_random_id(),
                    message = "–£—Å–ø–µ—à–Ω–æ‚úÖ"
                )

            else:
                vk.messages.send(
                    user_id = payload["user_id"],
                    random_id = get_random_id(),
                    message = "–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ‚ùå"
                )